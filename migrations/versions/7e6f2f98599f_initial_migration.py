"""Initial migration

Revision ID: 7e6f2f98599f
Revises: 
Create Date: 2025-07-14 03:17:24.038824

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7e6f2f98599f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('User_email_key'))

    # op.drop_table('User')
    # op.drop_table('test')
    # op.drop_table('Project')
    # op.drop_table('project')
    # op.drop_table('Question')
    # op.drop_table('Test')
    # op.drop_table('question')
    # op.drop_table('user_test_result')
    # op.drop_table('Resource')
    # op.drop_table('Report')
    # op.drop_table('UserTestResult')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('UserTestResult',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('testId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('completedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['testId'], ['Test.id'], name=op.f('UserTestResult_testId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('UserTestResult_userId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('UserTestResult_pkey'))
    )
    op.create_table('Report',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fileUrl', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fileType', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('submittedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('submissionDeadline', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('submittedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['submittedBy'], ['User.id'], name=op.f('Report_submittedBy_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Report_pkey'))
    )
    op.create_table('Resource',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fileUrl', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fileType', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('uploadedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['uploadedBy'], ['User.id'], name=op.f('Resource_uploadedBy_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Resource_pkey'))
    )
    op.create_table('user_test_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], name=op.f('user_test_result_test_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('user_test_result_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_test_result_pkey'))
    )
    op.create_table('question',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('QCM', 'Open', name='questiontypeenum'), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correct_answer', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('test_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], name=op.f('question_test_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('question_pkey'))
    )
    op.create_table('Test',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('QCM', 'Open', 'Practical', name='TestType'), autoincrement=False, nullable=False),
    sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['createdBy'], ['User.id'], name='Test_createdBy_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Test_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('Question',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('testId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('QCM', 'Open', name='QuestionType'), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('correctAnswer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['testId'], ['Test.id'], name=op.f('Question_testId_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Question_pkey'))
    )
    op.create_table('project',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('submitted_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Submitted', 'InReview', 'Approved', 'Rejected', name='projectstatusenum'), autoincrement=False, nullable=False),
    sa.Column('feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['submitted_by'], ['user.id'], name=op.f('project_submitted_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('project_pkey'))
    )
    op.create_table('Project',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('fileUrl', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fileType', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('submittedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('Submitted', 'InReview', 'Approved', 'Rejected', name='ProjectStatus'), server_default=sa.text('\'Submitted\'::"ProjectStatus"'), autoincrement=False, nullable=False),
    sa.Column('feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submittedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['submittedBy'], ['User.id'], name=op.f('Project_submittedBy_fkey'), onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name=op.f('Project_pkey'))
    )
    op.create_table('test',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('QCM', 'Open', 'Practical', name='testtypeenum'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], name=op.f('test_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('test_pkey'))
    )
    op.create_table('User',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('firstName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('lastName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('Participant', 'Mentor', 'Admin', name='Role'), server_default=sa.text('\'Participant\'::"Role"'), autoincrement=False, nullable=False),
    sa.Column('isVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('User_pkey'))
    )
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('User_email_key'), ['email'], unique=True)

    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    # ### end Alembic commands ###
